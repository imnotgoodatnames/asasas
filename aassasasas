

  function i(src) {
    let img = new Image();
    img.src = src;
    img.crossOrigin = 'Anonymous';
    img.width = img.height = 47;
    return img;
  }
}",
                "https://i.postimg.cc/mgSfVrqz/Boyfriend.gif",
                "https://i.postimg.cc/PJbJrM2q/Cap.png",
                "https://i.postimg.cc/zG1rVVJM/Cookies.png",
                "https://i.postimg.cc/ry0s4RkF/Santa.png",
                "https://i.postimg.cc/QNf29yyZ/Bag.png",
                "https://i.postimg.cc/5NjZwShY/Bells.png",
                "https://i.postimg.cc/T3DFsYYT/Bullfinch.png",
                "https://i.postimg.cc/pdM4Mbpz/Candles.png",
                "https://i.postimg.cc/GhN6zsRM/Christmas-toy.png",
                "https://i.postimg.cc/d1qfD2R0/Deer.png",
                "https://i.postimg.cc/ydvbRDny/Gift.png",
                "https://i.postimg.cc/vTTStGNF/Glass-Ball.png",
                "https://i.postimg.cc/Bv5yqYKy/Mistletoe.png",
                "https://i.postimg.cc/Fz6CPwMf/Mittens.png",
                "https://i.postimg.cc/RV3D3Vtw/Snowflake.png",
                "https://i.postimg.cc/HsfPbD0R/Snowman.png",
                "https://i.postimg.cc/XYd18HQJ/Sock.png",
                "https://i.postimg.cc/W4VWfGH7/Wreath.png"]
              
              const noel_images = [];
              
              for (let src in noel_sources)
              {
                let noel_image = new Image();
                noel_image.src = noel_sources[src]; 
                console.log(src);
                noel_image.width = noel_image.height = 47;
                noel_image.className = 'DqMRee SsAred';
                noel_images.push(noel_image);
              }
                      
              setTimeout(_ => {
              
                if(document.querySelector('#apple').childElementCount > 21)
                  for(let i = document.querySelector('#apple').childElementCount - 1; i >= 22; i--)
                    document.querySelector('#apple').removeChild(document.querySelector('#apple').children[i]);
                
                if (settings.noel)
                {
                  for (let noel_img in noel_images)
                  {
                    document.querySelector('#apple').appendChild(noel_images[noel_img]);
                  }
                }

                const HZ = code.match(
                  /g\.type<this\.[a-zA-Z0-9_$]{1,8}\.length\?g\.type:0/
                )[0].match(/this\.[a-zA-Z0-9_$]{1,8}/)[0];
                eval(
                  code.match(
                    /[a-zA-Z0-9_$]{1,8}\.prototype\.[a-zA-Z0-9_$]{1,8}=function\(\){if\(!this\.[a-zA-Z0-9_$]{1,8}&&[^]*?return this\.reset\(\)}/
                  )[0].replace(
                    '{',
                    `{
                      // ${HZ} = [...document.querySelector('#apple').children].map(e => [{ wa: { canvas: e }, oa: { canvas: e } }][0]);
                      
                      ${HZ} = [...document.querySelector('#apple').children].map((e, j) => [{ wa: { canvas: e } }][0]);
                      // if(${HZ}.length >= 22) {
                      //   for(let j = document.querySelector('#apple').children.length - 1; j >= 22; j++) {
                      //     ${HZ}.splice(j, 1);
                      //   }
                      // }
                      // if(${HZ}.length < 22) {
                      //   ${HZ}.push({ wa: { canvas: new Image }, oa: { canvas: new Image } });
                      //   for(let j = 22; j < document.querySelector('#apple').children.length; j++) {
                      //     ${HZ}.push({
                      //       wa: { canvas: document.querySelector('#apple').children[j] },
                      //     });
                      //   }
                      // }
                      console.log(${HZ})
                    `
                  )
                );
              }, 250);

              eval(
                code.match(
                  /[a-zA-Z0-9_$]{1,8}\.prototype\.[a-zA-Z0-9_$]{1,8}=function\(\){[^}]*?apple[^]*?el\(\)\)}}/
                )[0].replace(
                  'Math.floor(21*Math.random());',
                  `Math.floor((21 + ~~${settings.noel}) * Math.random());`
                )
              );
            }

            eval(`var boxImage = new Image; boxImage.src = 'https://i.postimg.cc/C1w3nYcZ/box.png';`);
            setTimeout(function() {
              

              const box = code.match(
                /this\.[a-zA-Z0-9_$]{1,8}=new [a-zA-Z0-9_$]{1,8}\([^)}]*?box\.png[^})]*?\);/
              )[0].replace('this.', '').replace(/=new[^]*/g, '');

              
              eval(
                `
                var boxCanvas = document.createElement('canvas');
                boxCanvas.width = 1024;boxCanvas.height = 128;
                var bctx = boxCanvas.getContext('2d');
                bctx.drawImage(boxImage, 0, 0);
          
                bctx.fillStyle = '${settings.light_goal}';
                bctx.fillRect(256, 0, 128, 128);
                bctx.fillStyle = '${settings.dark_goal}';
                bctx.fillRect(277, 21, 85, 85);
                bctx.fillStyle = '${settings.light_goal}';
                bctx.fillRect(298, 42, 42, 42);
                bctx.fillStyle = '${settings.dark_goal}';
                bctx.fillRect(384, 0, 128, 128);
                bctx.fillStyle = '${settings.light_goal}';
                bctx.fillRect(405, 21, 85, 85);
                bctx.fillStyle = '${settings.dark_goal}';
                bctx.fillRect(426, 42, 42, 42);
                bctx.fillStyle = '${settings.light_goal}';
                bctx.fillRect(512, 0, 128, 128);
                bctx.fillStyle = '${settings.darker_goal}';
                bctx.fillRect(533, 21, 85, 85);
                bctx.fillStyle = '${settings.light_goal}';
                bctx.fillRect(554, 42, 42, 42);
                bctx.fillStyle = '${settings.darker_goal}';
                bctx.fillRect(640, 0, 128, 128);
                bctx.fillStyle = '${settings.light_goal}';
                bctx.fillRect(661, 21, 85, 85);
                bctx.fillStyle = '${settings.darker_goal}';
                bctx.fillRect(682, 42, 42, 42);
                `
              );

              eval(
                code.match(
                  /[a-zA-Z0-9_$]{1,8}=function\(a\){a\.[a-zA-Z0-9_$]{1,8}\.globalCompositeOperation[^}]*"source-over"}/
                )[0].replace(
                  /#94BD46/g,
                  settings.shadows
                )
              );

              const tkb = code.match(
                /this\.[a-zA-Z0-9_$]{1,8}=new [a-zA-Z0-9_$]{1,8}\("snake_arcade\/key_types_dark\.png",[^)]*?\)/
              )[0].match(/this\.[a-zA-Z0-9_$]{1,8}/)[0];

              const oa = code.match(
                /[a-zA-Z0-9_$]{1,8}=function\(a\){return a\.[a-zA-Z0-9_$]{1,8}\.canvas}/
              )[0].match(/a\.[a-zA-Z0-9_$]{1,8}\.canvas/)[0].replace('a.', '').replace('.canvas', '');


              eval(
                `_boorg = new Image;_boorg.src='${url_k}';_boorg.crossOrigin='Anonymous';
                boorg = { wa: { canvas: _boorg, }, oa: { canvas: _boorg, }, };`
              );
              eval(
                code.match(
                  /[a-zA-Z0-9_$]{1,8}\.prototype\.render=function\(a,b\){this\.[a-zA-Z0-9_$]{1,8}&&this[^]*?el\(\),a\)}/
                )[0].replace(
                  '{',
                  `{
                    this\.${box}\.wa = this.${box}.oa = { canvas: boxCanvas, };
                  `
                ).replace(
                  '#578A34',
                  settings.borders
                ).replaceAll(
                  '#578A34',
                  settings.walls
                ).replaceAll(
                  '#a2d149',
                  settings.light_squares
                ).replaceAll(
                  '#AAD751',
                  settings.dark_squares
                ).replaceAll(
                  tkb, 
                  'boorg'
                )
              );
              eval(
                code.match(
                  /[a-zA-Z0-9_$]{1,8}=function\(a,b,c,d\){a\.context\.fillStyle[^}]*?}}/
                )[0].replaceAll(
                  '#a2d149',
                  settings.light_squares
                ).replaceAll(
                  '#AAD751',
                  settings.dark_squares
                )
              );
              eval(
                code.match(
                  /[a-zA-Z0-9_$]{1,8}\.prototype\.[a-zA-Z0-9_$]{1,8}=function\(\){var a=this,b=[^]*?return b\.promise}/
                )[0].replaceAll(
                  '#a2d149',
                  settings.light_squares
                ).replaceAll(
                  '#AAD751',
                  settings.dark_squares
                )
              );

          
              
          
              eval(
                code.match(
                  /[a-zA-Z0-9_$]{1,8}\.prototype\.[a-zA-Z0-9_$]{1,8}=function\(a,b,c,d,e\){this\.[a-zA-Z0-9_$]{1,8}&&\(this\.[a-zA-Z0-9_$]{1,8}\.translate[^}]*?y\)\)}/
                )[0].replace(
                  '{',
                  `{
                    let canv = document.createElement('canvas');
                    canv.width = 403;canv.height = 110;
          
                    let ctx = canv.getContext('2d');
          
                    for(let i = 0; i < 12; i++) {
                      if(i % 2 === 0)
                        ctx.fillStyle = '${settings.dark_ee || settings.dark_squares}';
                      else
                        ctx.fillStyle = '${settings.light_ee || settings.light_squares}';
                      
                      ctx.fillRect(i * 34, 0, (i + 1) * 34, 34);
                    }
          
                    for(let i = 0; i < 12; i++) {
                      if(i % 2 === 0)
                        ctx.fillStyle = '${settings.light_ee || settings.light_squares}';
                      else
                        ctx.fillStyle = '${settings.dark_ee || settings.dark_squares}';
                      
                      ctx.fillRect(i * 34, 34, (i + 1) * 34, 69);
                    }
          
                    for(let i = 0; i < 12; i++) {
                      if(i % 2 === 0)
                        ctx.fillStyle = '${settings.dark_ee || settings.dark_squares}';
                      else
                        ctx.fillStyle = '${settings.light_ee || settings.light_squares}';
                      
                      ctx.fillRect(i * 34, 70, (i + 1) * 34, canv.height);
                    }
                    
                  `
                ).replace(
                  'drawImage(',
                  `
                  drawImage(Object.values(this).reduce(
                    (s, el) => s || (typeof el === 'string' ? el.includes('end_empty') : false), false
                  ) ? canv : 
                  `
                )
              );
            }, 250);
          }, 250);
        }
      }, 250);
    }, 500);
    window.snake_scheme_epic_cool = JSON.stringify(settings);
  };

  window.snake.noel = function() {
    return window.snake.scheme({
      score_bar:     '#ff1919',
      walls:         '#101010',
      borders:       '#90EE90',
      shadows:       '#302C35',
      light_squares: '#226725',
      dark_squares:  '#1F4D21',
      buttons:       '#1E792C',
      sky:           '#ADD8E6',
      separators:    '#201559',
      noel:          true,
    });
  };
  function rgb_to_hsv(col) {
    let R = col.r / 255, G = col.g / 255, B = col.b / 255;
    let xmax = Math.max(R, G, B);
    let xmin = Math.min(R, G, B);
    let C = xmax - xmin;
    let h, s, v;
    v = xmax;
    h = (
      C === 0
        ? 0 
      : v === R
        ? 60 * (G - B) / C 
      : v === G
        ? 60 * (2 + (B - R) / C)
      : v === B
        ? 60 * (4 + (R - G) / C) 
      : 0
    );
    s = v == 0 ? 0 : C / v;
    return { h: h < 0 ? h + 360 : h, s: s, v: v, };
  }

  function hsv_to_rgb(col) {
    let C = col.v * col.s;
    let H = col.h / 60;
    let X = C * (1 - Math.abs((H % 2) - 1));
    
    let [ R, G, B, ] = (
      0 <= H && H <= 1 
        ? [ C, X, 0, ]
      : H <= 2 
        ? [ X, C, 0, ] 
      : H <= 3 
        ? [ 0, C, X, ] 
      : H <= 4 
        ? [ 0, X, C, ] 
      : H <= 5
        ? [ X, 0, C, ]
      : H <= 6
        ? [ C, 0, X, ] 
      : [ 0, 0, 0, ]
    );

    let m = col.v - C;
    let r = R + m, 
        g = G + m, 
        b = B + m;

    return { r: r * 255, g: g * 255, b: b * 255, };
  }


  function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
    if(typeof stroke === 'undefined')
      stroke = false;
    if(typeof radius === 'undefined')
      radius = 5;
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
    if(stroke)
      ctx.stroke();
    if(fill)
      ctx.fill();
  }

  function hex_to_rgb(hex) {
    hex = hex.replace('#', '');
    return {
      r: parseInt(hex.substring(0, 2), 16),
      g: parseInt(hex.substring(2, 4), 16),
      b: parseInt(hex.substring(4, 6), 16),
    };
  }

  function rgb_to_hex(col) {
    return `#${col.r.toString(16).padStart(2, '0')}${col.g.toString(16).padStart(2, '0')}${col.b.toString(16).padStart(2, '0')}`
  }

  function close(c0, c1, rr = 1, rg = rr, rb = rr) {
    return Math.abs(c0.r - c1.r) < rr &&
          Math.abs(c0.g - c1.g) < rg &&
          Math.abs(c0.b - c1.b) < rb;
  }

  function i(src) {
    let img = new Image();
    img.src = src;
    img.crossOrigin = 'Anonymous';
    img.width = img.height = 47;
    return img;
  }
}
